// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An error associated with a statement in a PartiQL batch that was run. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchStatementError {
    /// <p> The error code associated with the failed PartiQL batch statement. </p>
    pub code: ::std::option::Option<crate::types::BatchStatementErrorCodeEnum>,
    /// <p> The error message associated with the PartiQL batch response. </p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The item which caused the condition check to fail. This will be set if ReturnValuesOnConditionCheckFailure is specified as <code>ALL_OLD</code>.</p>
    pub item: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
}
impl BatchStatementError {
    /// <p> The error code associated with the failed PartiQL batch statement. </p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::BatchStatementErrorCodeEnum> {
        self.code.as_ref()
    }
    /// <p> The error message associated with the PartiQL batch response. </p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The item which caused the condition check to fail. This will be set if ReturnValuesOnConditionCheckFailure is specified as <code>ALL_OLD</code>.</p>
    pub fn item(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        self.item.as_ref()
    }
}
impl BatchStatementError {
    /// Creates a new builder-style object to manufacture [`BatchStatementError`](crate::types::BatchStatementError).
    pub fn builder() -> crate::types::builders::BatchStatementErrorBuilder {
        crate::types::builders::BatchStatementErrorBuilder::default()
    }
}

/// A builder for [`BatchStatementError`](crate::types::BatchStatementError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchStatementErrorBuilder {
    pub(crate) code: ::std::option::Option<crate::types::BatchStatementErrorCodeEnum>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) item: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
}
impl BatchStatementErrorBuilder {
    /// <p> The error code associated with the failed PartiQL batch statement. </p>
    pub fn code(mut self, input: crate::types::BatchStatementErrorCodeEnum) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p> The error code associated with the failed PartiQL batch statement. </p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::BatchStatementErrorCodeEnum>) -> Self {
        self.code = input;
        self
    }
    /// <p> The error code associated with the failed PartiQL batch statement. </p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::BatchStatementErrorCodeEnum> {
        &self.code
    }
    /// <p> The error message associated with the PartiQL batch response. </p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The error message associated with the PartiQL batch response. </p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p> The error message associated with the PartiQL batch response. </p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Adds a key-value pair to `item`.
    ///
    /// To override the contents of this collection use [`set_item`](Self::set_item).
    ///
    /// <p>The item which caused the condition check to fail. This will be set if ReturnValuesOnConditionCheckFailure is specified as <code>ALL_OLD</code>.</p>
    pub fn item(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AttributeValue) -> Self {
        let mut hash_map = self.item.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.item = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The item which caused the condition check to fail. This will be set if ReturnValuesOnConditionCheckFailure is specified as <code>ALL_OLD</code>.</p>
    pub fn set_item(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    ) -> Self {
        self.item = input;
        self
    }
    /// <p>The item which caused the condition check to fail. This will be set if ReturnValuesOnConditionCheckFailure is specified as <code>ALL_OLD</code>.</p>
    pub fn get_item(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        &self.item
    }
    /// Consumes the builder and constructs a [`BatchStatementError`](crate::types::BatchStatementError).
    pub fn build(self) -> crate::types::BatchStatementError {
        crate::types::BatchStatementError {
            code: self.code,
            message: self.message,
            item: self.item,
        }
    }
}
